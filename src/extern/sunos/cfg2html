#!/bin/ksh

#			 /----------------\
#			< cfg2html_solaris >
#			 \----------------/

# This script's purpose is to collect server configuration data, 
# then use these data to create HTML and text reports, 
# primarily for use in disaster-recovery (DR) scenarios.
#
# Based on cfg2html_sun.sh version 1.14, by Ralph Roth and a legion of others
# Hacked almost beyond recognition for Amylin environment by S^2, Jul-Aug 2008

PATH=$PATH:/local/bin:/local/sbin:/usr/bin:/usr/sbin:/local/gnu/bin
PATH=$PATH:/usr/ccs/bin:/local/X11/bin:/usr/openwin/bin:/usr/dt/bin
PATH=$PATH:/usr/proc/bin:/usr/ucb:/local/misc/openv/netbackup/bin
PATH=$PATH:/opt/BRCD/pkg/monitoring/cfg2html/cfg2html-1.6.4/plugins:/etc

#			 /------------------------------\
#			< Enable/Disable Data Collectors >
#			 \------------------------------/

#
# Use "no" to disable a data collection subroutine.  
# Anything other than "no" is treated as yes.
#
CFG_SYS="YES"		# CFG_SYSTEM with CFG_SYS. Uses new plugin
CFG_EEPROM="YES"	# Changed KERNEL to EEPROM. S^2 Sep 2008
CFG_DISKS="YES"		
CFG_SAN="YES"		# Includes HBAs, MPxIO, and EMC PowerPath 
CFG_SVM="YES"		# Renamed DISKSUITE to SVM.  This is 2008!  
CFG_FILESYS="YES"	# ZFS data collector added. S^2 Aug 2008
CFG_ZONES="YES"		# New option, S^2 Sep 2008
CFG_NETWORK="YES"
CFG_PRINTER="YES"	
CFG_CRON="YES"
CFG_PASSWD="YES"
CFG_PACKAGES="YES"	# Renamed SOFTWARE -> PACKAGES;  Software too vague
CFG_SERVICES="YES"	# Renamed "FILES" to "SERVICES".  S^2 1 Aug 2008
CFG_LIMITS="YES"	# Resource Limits, new collector. S^2 Aug 2008
CFG_SYSLOG="YES"	# New option, S^2 31 Jul 2008
CFG_ORACLE="YES"	# Lists any Oracle database instances running
CFG_VxNBU="YES"		# New option, S^2 Sep 2008
CFG_VxVM="YES"		# New option, S^2 Sep 2008
CFG_VxFS="YES"		# New option, S^2 Sep 2008
CFG_CLUSTERSUN="YES"	# New option, S^2 mars 2012

# Can be changed via command line with -b option.
 
CCS_BACKGROUND="#FFFFFF" # Defaults to simple white background for html page.

VERSION="cfg2html_solaris version 1.7"
RELEASED_ON="Apr 4, 2012"

#			 /----------\
#			< Show Usage >
#			 \----------/

usage() {
   cat << _EOF_
`basename $0` - Creates HTML & text documentation of the local host config

Usage: `basename $0` [-ovhzZefdnPcpSsVO]"

  -o		set output directory 
  -v		show version and exit
  -h		display this help and exit

Use the following options to change html look and feel:

  -b		change the background property in HTML CCS
                example: $0 -b "#CCCCCC;"

Use the following options to disable collections:

  -z		disable: System
  -Z		disable: Zones
  -e		disable: EEPROM
  -f		disable: Filesystems
  -d		disable: Disks
  -n		disable: Network
  -P		disable: Printers
  -c		disable: Cron
  -p		disable: Password and Group files
  -S		disable: Package and Patch Listing
  -s		disable: Services
  -V		disable: Solaris Volume Manager (SVM)
  -O		disable: Oracle
  -C		disable: Cluster Sun / Oracle

_EOF_
}


#			 /-----------\
#			< Get Options >
#			 \-----------/

   while getopts ":o:b:vhskHfdnPcpSFaDxzZO" Option ; do
      case $Option in
         o     ) OUTDIR=$OPTARG;;
         v     ) echo "\nScript name:  $VERSION"; echo "Released on:  $RELEASED_ON\n";	exit;;
         h     ) usage;		exit;;
         b     ) CCS_BACKGROUND="$OPTARG";;
         z     ) CFG_SYS="no";;	
         k     ) CFG_EEPROM="no";;
         f     ) CFG_FILESYS="no";;
         d     ) CFG_DISKS="no";;
         n     ) CFG_NETWORK="no";;
         P     ) CFG_PRINTER="no";;
         c     ) CFG_CRON="no";;
         p     ) CFG_PASSWD="no";;
         O     ) CFG_ORACLE="no";;
         S     ) CFG_PACKAGES="no";;
         s     ) CFG_SERVICES="no";;
         V     ) CFG_SVM="no";;
         Z     ) CFG_ZONES="no";;
         C     ) CFG_CLUSTERSUN="no";;
         *     ) echo "Unimplemented option chosen.";exit 1;;   # DEFAULT
      esac
   done
   shift $(( $OPTIND - 1 )); 


#                        /-----------------------\
#                       < Setup Output File Names >
#                        \-----------------------/

host=`hostname | perl -pe 's|_cfg||; s|\..*$||'`
[ "x$OUTDIR" = 'x' ] && OUTDIR=`pwd`
#CFG_HOME=`pwd`
CFG_HOME=${0%/*}
PLUGINS=$CFG_HOME/plugins

TEXT_TOC=$OUTDIR/${host}_cfg.txt
HTML_TOC=$OUTDIR/${host}_cfg.html
TEXT_BODY=/tmp/${host}_cfg.txt.$$
HTML_BODY=/tmp/${host}_cfg.html.$$

ERROR_LOG=$OUTDIR/${host}_cfg.err

DATEFULL=`date "+%Y-%m-%d %H:%M:%S"`
# Convert illegal characters for HTML into escaped ones.
# Convert '&' first! (Peter Bisset [pbisset@emergency.qld.gov.au])
CONVSTR='
        s/&/\&amp;/g
        s/</\&lt;/g
        s/>/\&gt;/g
        s/\\/\&#92;/g
        '

#			 /-------------\
#			< Safety Checks >
#			 \-------------/

safety_checks() {

   id=`/usr/xpg4/bin/id -u`;
   if [ $id -ne 0 ]; then
      printf "ERROR: This script must be run as root; aborting.\n"
      exit 1
   fi

   if [ ! -d $PLUGINS ] ; then
      printf "ERROR: The plugins directory is missing, aborting.\n"
      exit 1
   fi

   touch $HTML_TOC
   if [ ! -f $HTML_TOC ] ; then
      printf "ERROR: You have not the rights to create ${HTML_TOC}, aborting.\n"
      exit 1
   fi
}


#			 /--------------\
#			< Misc functions >
#			 \--------------/

start_error_log() { exec 2>$ERROR_LOG; }

line() 	{ echo ------------------------------------------------- ; }

horiz_line() {
   echo "<hr>"  >> $HTML_TOC
   echo "-----" >> $TEXT_TOC
}


#			 /---------\
#			< Open HTML >
#			 \---------/

open_html() {

   echo "
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">

<HTML> 
<HEAD>
   <META NAME="DESCRIPTION" CONTENT="cfg2html_solaris">

   <style type="text/css">

   PRE             {font-family: Lucidia-Console, Courier-New, Courier; font-size: 10pt}
   BODY            {background: ${CCS_BACKGROUND}, font-family: Arial, Verdana, Helvetica, Sans-serif; font-size: 12pt}
   A               {font-family: Arial, Verdana, Helvetica, Sans-serif}
   A:link          {text-decoration: none}
   A:visited       {text-decoration: none}
   A:hover         {text-decoration: underline}
   A:active        {color: red; text-decoration: none}

   H1              {font-family: Arial, Verdana, Helvetica, Sans-serif; font-size: 20pt}
   H2              {font-family: Arial, Verdana, Helvetica, Sans-serif; font-size: 14pt}
   H3              {font-family: Arial, Verdana, Helvetica, Sans-serif; font-size: 12pt}
   DIV, P, OL, UL, SPAN, TD
                {FONT-FAMILY: Arial, Verdana, Helvetica, Sans-serif;FONT-SIZE: 11pt}
   </style>

   <TITLE>$host - (Solaris) System Documentation</TITLE>
</HEAD>

<BODY>
<H1>
    <hr>
    <CENTER>
    <FONT COLOR=blue>
    <B>$host - (Solaris) System Documentation</B>
    </font>
    </center>
</H1>

<hr>
<FONT COLOR=blue><small>Created "$DATEFULL" with " $VERSION which was released on: $RELEASED_ON"</small></font>
<HR>

<H1>Contents</H1>
" >$HTML_TOC

}

open_text() {

   (line;banner $host;line) > $TEXT_TOC
   echo "\n" >> $TEXT_TOC
   echo "\n" >  $TEXT_BODY
}


#			 /-----------------------\
#			< Increment Heading Level >
#			 \-----------------------/ 

inc_heading_level() {
   HEADL=$(( $HEADL + 1 ))
   echo "<UL type='square'>" >> $HTML_TOC
}


#			 /-----------------------\
#			< Decrement Heading Level >
#			 \-----------------------/ 

dec_heading_level() {
   HEADL=$(( $HEADL - 1 ))
   echo "</UL>" >> $HTML_TOC
}


#			 /----------------\
#			< Create Paragraph >
#			 \----------------/

paragraph() {
   [ "$HEADL" -eq 1 ] && printf '<HR>' >> $HTML_BODY
   echo "<A NAME=\"$1\">" >> $HTML_BODY
   echo "<A HREF=\"#Inhalt-$1\"><H${HEADL}> $1 </H${HEADL}></A><P>" >> $HTML_BODY

   echo "<A NAME=\"Inhalt-$1\"></A><A HREF=\"#$1\">$1</A>" >> $HTML_TOC
   echo "\nCollecting: " $1 " .\c"
   echo "    $1" >> $TEXT_TOC
}


#			 /---------------\
#			< Execute Command >
#			 \---------------/
#
#  Documents the single commands and their output
#  $1  = unix command,  $2 = text for the heading
#

exec_command() {

   printf '.'

   # Run command, capture STDOUT and STDERR 
   #
   TMP_EXEC_COMMAND_ERR=/tmp/exec_cmd.tmp.$$
   EXEC_RESULT=`eval $1 2> $TMP_EXEC_COMMAND_ERR | expand | cut -c 1-150 | sed "$CONVSTR"`
   if [ -z "$EXEC_RESULT" ] ; then
      EXEC_RESULT="n/a"
   fi
   if [ -s $TMP_EXEC_COMMAND_ERR ] ; then
      echo "stderr output from \"$1\":" >> $ERROR_LOG
      cat $TMP_EXEC_COMMAND_ERR | sed 's/^/    /' >> $ERROR_LOG
   fi
   rm -f $TMP_EXEC_COMMAND_ERR

   # Send Command Output to TEXT file 
   #
   echo "\n---=[ $2 ]=----------------------------------------------------------------" | cut -c1-74 >> $TEXT_BODY
   echo "       - $2" >> $TEXT_TOC

   # Command Output, HTML file 
   #
   echo "\n" >> $HTML_BODY
   echo "<A NAME=\"$2\"></A> <A HREF=\"#Inhalt-$2\" title=\"$TiTel\"><H${HEADL}> $2 </H${HEADL}></A>\n" >>$HTML_BODY
   echo "<PRE>$EXEC_RESULT</PRE>\n"  >>$HTML_BODY
   echo "<LI><A NAME=\"Inhalt-$2\"></A><A HREF=\"#$2\" title=\"$TiTel\">$2</A>\n" >> $HTML_TOC
   echo "\n$EXEC_RESULT\n" >> $TEXT_BODY
}


#			 /----------\
#			< Close HTML >
#			 \----------/

close_html() {

   # Give Credit
   #
   echo "</P><P><hr><FONT COLOR=blue>Created $DATEFULL with $VERSION which was released on: $RELEASED_ON</P></font>"       >> $HTML_BODY
   echo "</P><P><FONT COLOR=blue>Based on the original script by Ralph Roth</P></font>" >> $HTML_BODY
   echo "</P><P><FONT COLOR=blue>Modify and adapt by jerome Robert <a href=http://www.admin-sys.com target=new> http://www.admin-sys.com</a></p></font>" >> $HTML_BODY
   echo "<hr></BODY></HTML>\n"                                                          >> $HTML_BODY

   echo '</UL>'           >> $HTML_TOC;	# After the TOC, HTML code was missing a closing </UL>. S^2 31 Jul 2008

   horiz_line

   #	Combine Table of Contents and Body parts into one file
   #
   cat $HTML_BODY >> $HTML_TOC
   rm -f $HTML_BODY
}

close_text() {

   # Give Credit
   #
   echo "Created $DATEFULL with $VERSION" >> $TEXT_BODY

   #	Combine Table of Contents and Body parts into one file
   #
   cat $TEXT_BODY >> $TEXT_TOC
   rm -f $TEXT_BODY

}

#			 /------------------------\
#			< Show Prog Config Summary >
#			 \------------------------/

show_prog_config() {
   line
   echo "Starting          "$VERSION" on a "`uname -rsi`
   echo "Path to cfg2html  "$0
   echo "Path to plugins   "$PLUGINS
   echo "HTML Output File  "$HTML_TOC
   echo "Text Output File  "$TEXT_TOC
   echo "Errors logged to  "$ERROR_LOG
   echo "Started at        "$DATEFULL
   line
}

#                        /--------------\
#                       < System Summary >
#                        \--------------/

get_sys() {

   paragraph "System Hardware and Operating System Summary"

   inc_heading_level

      exec_command $PLUGINS/get_sys_info.sh 			"Hardware and OS Information"
      exec_command "showrev" 					"showrev"
      exec_command "/usr/platform/`uname -m`/sbin/prtdiag" 	"Hardware Configuration (prtdiag)"

   dec_heading_level
}

#			 /---------------\
#			< EEPROM Settings >
#			 \---------------/

get_eeprom() {

   paragraph "EEPROM"

   inc_heading_level

      exec_command "/usr/platform/`uname -m`/sbin/eeprom" "EEPROM Settings"
      exec_command "ls -l /etc/system*" "Versions of /etc/system"

      comment_count=`head -77 /etc/system | egrep -c '^\*'`
      if [ $comment_count = 64 ]; then
         # if this is a "Sun Standard" /etc/system, just show the last part
         exec_command "tail +78 /etc/system" "Contents of /etc/system"
      else
         # otherwise, show the whole thing
         exec_command "cat /etc/system" "Contents of /etc/system"
      fi

   dec_heading_level
}


#			 /--------------------\
#			< Resource Limitations >
#			 \--------------------/

get_limits() {

   paragraph "Resource Limits"
   inc_heading_level

      exec_command "sysdef | sed -n '/System Configuration/,/XYZZYxyzzy/p'"  "sysdef"
      exec_command 'bash -c "ulimit -a"'  "ulimit -a"
      exec_command "projects -l" 	"Projects Listing (projects -l)"
      exec_command "cat /etc/project"	"Contents of /etc/project"

   dec_heading_level
}


#			 /-----------------------\
#			< File System Information >
#			 \-----------------------/

get_filesys() {

   paragraph "Local File Systems and Swap"

   inc_heading_level
      exec_command "ls -l /etc/vfstab*"      				"Versions of /etc/vfstab"
      exec_command "cat /etc/vfstab | ./plugins/align"		 	"Contents of vfstab"
      exec_command 'mount -p | egrep -v " lofs "| ./plugins/align   '	"Currently Mounted File Systems"
      exec_command "df -k" 	     					"Disk Utilization (ko)"	
      exec_command "swap -l"						"Swap Device Listing"
   dec_heading_level

   if [ -x /usr/sbin/zpool ]
   then
     test=`zpool status`;
     if [ "x$test" != 'xno pools available' ]; then

        paragraph 'ZFS Configuration'

        inc_heading_level
#           zfs_vers=`zpool upgrade | nawk '/version / {print $8}' | tr -d '.'`
#           zfs_vers=`zpool upgrade | nawk '/version / {print $9}' | tr -d '.'`
           zfs_vers=`zpool upgrade | grep ZFS | sed 's/.*version//' | tr -d '.'`
           exec_command 'echo "ZFS version: $zfs_vers"'			"ZFS Version"
           exec_command "zpool list"					"zpool list"
           exec_command "zpool status"					"zpool status"
           exec_command "zfs list -o name,used,avail,refer,mountpoint,mounted,compress,sharenfs -t filesystem"	"zfs list: filesystem(s)"
           exec_command "zfs list -t snapshot"					"zfs list: snapshot(s)"
           exec_command "zfs list -t volume"					"zfs list: volume(s)"
           exec_command "zfs get all |egrep -v -- 'default|-$|inherited'"	"zfs get all (defaults omitted)"
           [ $zfs_vers -ge 4 ] && exec_command "zpool history"		"zpool history"

     fi # end if zpool

     dec_heading_level

     fi # end of if 'xno pools available'

   paragraph "NFS Configuration"

   inc_heading_level
      exec_command "cat /etc/dfs/dfstab"  "Contents of dfstab"
      exec_command "mount -p | grep nfs"  "Remote file systems mounted via NFS"
      exec_command "dfshares"             "Local file systems shared via NFS"
      exec_command "dfmounts"             "Local file systems mounted on remote hosts via NFS"
   dec_heading_level


   if [ -f /etc/sfw/smb.conf ]; then

      paragraph "Samba Configuration"

      inc_heading_level
         exec_command "egrep -v '^[#;]|^[ 	]*$' /etc/sfw/smb.conf" "smb.conf"
      dec_heading_level
   fi


}


#                        /-----------------------\
#                       < Zone Config Information >
#                        \-----------------------/

get_zones() {

   if [ -x /usr/bin/zonename ]
   then
      zonename=`/usr/bin/zonename`
   else
      zonename="NA"
   fi

   if [ -x /usr/sbin/zoneadm ] && [ "$zonename" = "global" ]; then
      
      zones=`zoneadm list -c`;

      paragraph "Zone/Container Information"

      inc_heading_level
         exec_command "zoneadm list -cv"            "Zone Listing"

         for zone in $zones; do
            if [ "$zone" = "global" ]
            then
                exec_command 'echo "NO possible export for global zone'	"Configuration for Zone $zone"
            else
                exec_command "zonecfg -z $zone export"	"Configuration for Zone $zone"
            fi
         done

      dec_heading_level

   fi

}


#                        /----------------\
#                       < SAN-related info >
#                        \----------------/

get_san() {

   # get_san includes HBA, MPxIO and EMC Powerpath info

   if [ -x /usr/sbin/fcinfo ]; then

      paragraph "Host-Bus Adapters (HBAs)"

      inc_heading_level
         exec_command "fcinfo hba-port" "HBA Details"
      dec_heading_level
   fi

   if [ -f /kernel/drv/scsi_vhci.conf ]; then
      line_count=`egrep -v '^[#;]|^[ 	]*$' /kernel/drv/scsi_vhci.conf | grep -c '$'`;
      if [ $line_count -gt 3 ]; then

         paragraph "MPxIO Configuration"

         inc_heading_level
            exec_command "egrep -v '^[#;]|^[ 	]*$' scsi_vhci.conf" "scsi_vhci.conf"
         dec_heading_level

      fi
   fi

   pkginfo EMCpower > /dev/null 2>&1
   if [ $? -eq 0 ] ; then

      paragraph "EMC PowerPath"

      inc_heading_level
         EMCver=`pkginfo -l EMCpower | grep -i version:`
         exec_command "echo $EMCver" "EMCpower version"

         if [ -e "/opt/emc/SInquiry/V4.1/bin/inq" ] ; then
            exec_command "/opt/emc/SInquiry/V4.1/bin/inq" "EMC disks inquire"
         fi

         exec_command "powermt display dev=all" "EMC Power display"
      dec_heading_level
   fi
}


#			 /----------------\
#			< Disk Device info >
#			 \----------------/

get_disks() {

   paragraph "Disk Device Listing"

   inc_heading_level
      exec_command "$PLUGINS/list_disks        " "Disks"
   dec_heading_level
}


#			 /----------------------------\
#			< Solaris Volume Manager (SVM) >
#			 \----------------------------/

get_svm() {

   paragraph "Solaris Volume Manager (SVM)"

   inc_heading_level

      DSVER=`pkginfo -l SUNWmdu | grep -i version:`
      exec_command "echo $DSVER"  "SVM Version" 
      exec_command "metadb -i"    "Status of SVM Meta Database"
      exec_command "metastat"     "SVM Metadevice status"
      exec_command "metastat -c"  "SVM Configuration (concise format)"
      exec_command "metastat -p"  "SVM Configuration (md.tab format)"
   if ( metaset | grep -i Name > /dev/null 2> /dev/null)
   then
      		exec_command "metaset"  "SVM metaset (metaset)"
   fi

   dec_heading_level
}


#			 /----------------\
#			< Network Settings >
#			 \----------------/

get_network() {

   paragraph "Network Settings"

   inc_heading_level
      exec_command "ifconfig -a" 		"ifconfig -a output"
      if [ -x /usr/sbin/dladm ]; then

          # Show link, speed and duplex status for each interface
          exec_command "dladm show-dev"		"dladm show-dev output"

          # If any aggregates have been defined, show them
          aggr_list=`dladm show-aggr`
          if [ "x$aggr_list" != 'x' ]; then 
             exec_command "dladm show-aggr"        "Aggregates Defined"
          fi

          # If any VLAN-tagging has been setup, show it
          vlan_list=`dladm show-link | egrep -v "non-vlan|legacy"`
          if [ "x$vlan_list" != 'x' ]; then
             exec_command "dladm show-link | egrep -v 'non-vlan|legacy'" "VLANs Configured"
          fi

      fi

      exec_command "netstat -an | grep LISTEN"			 "Open Ports"
      exec_command "netstat -rvn  | ./plugins/align"		 "Routing Table"
      exec_command "egrep -v '^#|^[ 	]*$' /etc/nsswitch.conf" "nsswitch.conf"
      exec_command "cat /etc/resolv.conf  | ./plugins/align "	 "resolv.conf"
      exec_command "cat /etc/inet/hosts"			 "Hosts file"
      exec_command "egrep -v '^#' /etc/netmasks |./plugins/align" 	 "Netmasks"

      pgrep ypbind > /dev/null 2>&1 
      if [ $? -eq 0 ]; then
         exec_command "domainname" "domainname"
         exec_command "ypwhich 2>&1" "ypwhich"
      fi

      exec_command "egrep -v '^#|^[ 	]*$' /etc/inet/ntp.conf" "NTP daemon configuraition"
   dec_heading_level
}


#			 /---------------------\
#			< Printer Queue Configs >
#			 \---------------------/

get_printer() {

   paragraph "Printers"

   inc_heading_level
      exec_command "lpstat -s" "Configured printers"
      exec_command "lpstat -d" "Default printer"
      exec_command "lpstat -t" "Status printers"
   dec_heading_level
}


#			 /--------\
#			< Crontabs >
#			 \--------/

get_cron() {

   paragraph "Cron"

   inc_heading_level
      exec_command $PLUGINS/crontab_collect.sh "crontabs"
      [ -f /etc/cron.d/cron.allow ] && exec_command "cat /etc/cron.d/cron.allow" "cron.allow"
      [ -f /etc/cron.d/cron.deny  ] && exec_command "cat /etc/cron.d/cron.deny"  "cron.deny"
   dec_heading_level
}


#			 /--------------------\
#			< Syslog Configuration >
#			 \--------------------/

get_syslog() {

   paragraph "System Log"

   inc_heading_level
      exec_command "cat /etc/syslog.conf" "syslog.conf"
   dec_heading_level
}


#			 /--------------\
#			< passwd & group >
#			 \--------------/

get_passwd() {

   paragraph "Password and Group files"

   inc_heading_level
      exec_command "cat /etc/passwd  |  ./plugins/align -d: | sort -n  -k3" "/etc/passwd"
      pwck  > /dev/null 2>&1 || exec_command "pwck  2>&1" "Errors found in passwd"
      exec_command "cat /etc/group   |  ./plugins/align -d: |sort -n -k2" "/etc/group"

if ( ypwhich  > /dev/null 2> /dev/null )
then
	exec_command "echo Because management by nis "  "Errors found in group"
else
      grpck > /dev/null 2>&1 || exec_command "grpck 2>&1" "Errors found in group"
fi

   dec_heading_level
}


#			 /------------------\
#			< Packages & Patches > 
#			 \------------------/

get_packages() {

  paragraph "Software"

   inc_heading_level

      exec_command "pkginfo "   "Packages Installed"
      exec_command "showrev -p" "Patches Installed"

   dec_heading_level
}

#                              /--------\
#                             < Services >
#                              \--------/

get_services() {

   paragraph "Services"

   inc_heading_level
	
      [ -x /usr/bin/svcs ] && exec_command "svcs -a" "Service Listing (svcs -a)"
      [ -x /usr/bin/svcs ] && exec_command "svcs -x" "Service status (svcs -x)"
      exec_command "cat /etc/inittab" "inittab"

      exec_command "ls -1 /etc/rc?.d/S*" "Start-Up Script Listing"

      for FILE in `ls -1 /etc/rc?.d/S*`; do
         if [ -s ${FILE} ]; then
            exec_command "cat ${FILE}" "${FILE}"
         fi
      done
   dec_heading_level
}

#                              /-------\
#                             <  VxNBU  >
#                              \-------/

get_vxnbu() {

   if [ -e /usr/openv/netbackup/version ]; then
      paragraph "Veritas Netbackup"
      inc_heading_level

         exec_command "cat /usr/openv/netbackup/version" "Veritas Netbackup version"
         exec_command "cat /usr/openv/netbackup/bp.conf" "Veritas Netbackup config (bp.conf)"

      dec_heading_level
   fi
}


#                              /------\
#                             <  VxVM  >
#                              \------/

get_vxvm() {

   if pkginfo VRTSvxvm > /dev/null 2>&1 ; then
      paragraph "VxVM"
      inc_heading_level
         VxVMVER=`pkginfo -l VRTSvxvm | grep -i version: | awk '{ print $2 }'`
         exec_command "echo $VxVMVER" "VxVM version" "pkginfo -l VRTSvxvm"
         exec_command "vxdisk -o alldgs list" "vxdisk -o alldgs list"
         exec_command $PLUGINS/VxVM_collect.sh "VxVM collector"
   
         for dg in `vxdg list |awk '{print ($1)}'|grep -v NAME` ; do
	    exec_command "vxdg list $dg" "$dg"
         done
   
         exec_command "vxprint" "vxprint"
         exec_command "vxdg free" "vxdg free"
            
         if [ -f /etc/vx/elm/* ] ; then
            exec_command "vxlicense -p" "vxlicense -p" # for <3.5 only
            for i in `ls /etc/vx/elm/*` ; do
	       exec_command "cat $i" "license file $i"
	    done
         fi
   
         if [ -f /etc/vx/licenses/lic/* ] ; then
            # for >3.5 only
            if [ -f /opt/VRTSvlic/bin/vxlicrep ] ; then
               exec_command "/opt/VRTSvlic/bin/vxlicrep" "VxVM licensing"
            else
	       exec_command "vxlicrep" "VxVM licensing" 
            fi
         fi
      dec_heading_level
   fi
}

#                              /------\
#                             <  VxFS  >
#                              \------/

get_vxfs() {
   pkginfo VRTSvxfs >/dev/null 2>&1 
   if [ $? -eq 0 ] ; then
      paragraph "VxFS"
      inc_heading_level
         VxFSVER=`pkginfo -l VRTSvxfs | grep -i version: | awk '{print $2}'`
         exec_command "echo $VxFSVER" "VxFS version" "pkginfo -l VRTSvxfs"
      dec_heading_level
   fi
}
#                              /--------------\
#                             <  Cluster SUN   >
#                              \--------------/

get_clustersun() {
   pkginfo SUNWscr >/dev/null 2>&1
   if [ $? -eq 0 ] ; then
      paragraph "Cluster Sun / Oracle"
      inc_heading_level
	 exec_command $PLUGINS/ClusterSun.sh "Cluster Sun / Oracle collector"

      dec_heading_level
   fi
}


#                              /------\
#                             < Oracle >
#                              \------/

get_oracle() {
   num_instances=`ps -ef | grep -c "[o]ra_smon"`;

   if [ $num_instances -gt 0 ]; then
       paragraph "Oracle"
       inc_heading_level
          exec_command 'ps -ef | grep "[o]ra_smon" | cut -c61-75' "Oracle Database Instances Running"
          ora_vers=`su - oracle -c \$ORACLE_HOME/bin/sqlplus < /dev/null | awk "/Release/ {print \$3}"`
          exec_command "echo $ora_vers" "Oracle Version"
       dec_heading_level
   fi
}


#                          /----------------\
#                         < Close & Clean Up >
#                          \----------------/

clean_up() {
   echo "\n"
   [ ! -s "$ERROR_LOG" ] && rm -f $ERROR_LOG 2> /dev/null # Remove the error.log if empty
   rm -f core 
}


#                              /------\
#                             <  MAIN  >
#                              \------/

safety_checks
#start_error_log
show_prog_config
open_html
open_text

HEADL=1;        # set initial header level

printf "\n"
line

   # Data collection starts here
   [ "$CFG_SYS"      != "no" ] && get_sys
   [ "$CFG_DISKS"    != "no" ] && get_disks
   [ "$CFG_SAN"      != "no" ] && get_san
   [ "$CFG_SVM"      != "no" ] && get_svm
   [ "$CFG_FILESYS"  != "no" ] && get_filesys
   [ "$CFG_ZONES"    != "no" ] && get_zones
   [ "$CFG_NETWORK"  != "no" ] && get_network
   [ "$CFG_EEPROM"   != "no" ] && get_eeprom
   [ "$CFG_PRINTER"  != "no" ] && get_printer
   [ "$CFG_CRON"     != "no" ] && get_cron
   [ "$CFG_SYSLOG"   != "no" ] && get_syslog
   [ "$CFG_PASSWD"   != "no" ] && get_passwd
   [ "$CFG_PACKAGES" != "no" ] && get_packages
   [ "$CFG_LIMITS"   != "no" ] && get_limits
   [ "$CFG_SERVICES" != "no" ] && get_services
   [ "$CFG_ORACLE"   != "no" ] && get_oracle
   [ "$CFG_VxNBU"    != "no" ] && get_vxnbu
   [ "$CFG_VxVM"     != "no" ] && get_vxvm
   [ "$CFG_VxFS"     != "no" ] && get_vxfs
   [ "$CFG_CLUSTERSUN"     != "no" ] && get_clustersun

printf "\n"
line

close_html
close_text

clean_up
exit 0

#	  		     /-----\
#                           <  END  >
#			     \-----/
